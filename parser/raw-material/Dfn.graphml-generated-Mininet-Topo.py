"""
Custom topology for Mininet, generated by GraphML-Topo-to-Mininet-Network-Generator.
"""

from mininet.topo import Topo, Node

class GeneratedTopo( Topo ):
    "Internet Topology Zoo Specimen."

    def __init__( self, enable_all = True ):
        "Create a topology."

        # Add default members to class.
        super( GeneratedTopo, self ).__init__()

        # Set Node IDs for hosts and switches
        CHE = 0
        LEI = 1
        ADH = 2
        DRE = 3
        GSI = 4
        HEI = 5
        JEN = 6
        ILM = 7
        DeCix = 8
        Geant = 9
        FZK = 10
        STU = 11
        DeCix = 12
        Telia = 13
        BIE = 14
        Telekom = 15
        GOE = 16
        BRE = 17
        WUP = 18
        BIR = 19
        BON = 20
        MAR = 21
        GIE = 22
        KAS = 23
        PAD = 24
        EWE = 25
        Telekom = 26
        MUE = 27
        SAA = 28
        GC = 29
        DES = 30
        HAM = 31
        KIE = 32
        ROS = 33
        MAG = 34
        BRA = 35
        KAI = 36
        GRE = 37
        DOR = 38
        BOC = 39
        FHM = 40
        REG = 41
        AUG = 42
        GAR = 43
        DUI = 44
        FZJ = 45
        AAC = 46
        WUE = 47
        TUB = 48
        HUB = 49
        HAN = 50
        FRA = 51
        POT = 52
        ERL = 53
        BAY = 54
        FFO = 55
        ZIB = 56
        ZEU = 57

        # Add nodes
        #switches
        self.add_node( CHE, Node( is_switch=True ) )
        self.add_node( LEI, Node( is_switch=True ) )
        self.add_node( ADH, Node( is_switch=True ) )
        self.add_node( DRE, Node( is_switch=True ) )
        self.add_node( GSI, Node( is_switch=True ) )
        self.add_node( HEI, Node( is_switch=True ) )
        self.add_node( JEN, Node( is_switch=True ) )
        self.add_node( ILM, Node( is_switch=True ) )
        self.add_node( DeCix, Node( is_switch=True ) )
        self.add_node( Geant, Node( is_switch=True ) )
        self.add_node( FZK, Node( is_switch=True ) )
        self.add_node( STU, Node( is_switch=True ) )
        self.add_node( DeCix, Node( is_switch=True ) )
        self.add_node( Telia, Node( is_switch=True ) )
        self.add_node( BIE, Node( is_switch=True ) )
        self.add_node( Telekom, Node( is_switch=True ) )
        self.add_node( GOE, Node( is_switch=True ) )
        self.add_node( BRE, Node( is_switch=True ) )
        self.add_node( WUP, Node( is_switch=True ) )
        self.add_node( BIR, Node( is_switch=True ) )
        self.add_node( BON, Node( is_switch=True ) )
        self.add_node( MAR, Node( is_switch=True ) )
        self.add_node( GIE, Node( is_switch=True ) )
        self.add_node( KAS, Node( is_switch=True ) )
        self.add_node( PAD, Node( is_switch=True ) )
        self.add_node( EWE, Node( is_switch=True ) )
        self.add_node( Telekom, Node( is_switch=True ) )
        self.add_node( MUE, Node( is_switch=True ) )
        self.add_node( SAA, Node( is_switch=True ) )
        self.add_node( GC, Node( is_switch=True ) )
        self.add_node( DES, Node( is_switch=True ) )
        self.add_node( HAM, Node( is_switch=True ) )
        self.add_node( KIE, Node( is_switch=True ) )
        self.add_node( ROS, Node( is_switch=True ) )
        self.add_node( MAG, Node( is_switch=True ) )
        self.add_node( BRA, Node( is_switch=True ) )
        self.add_node( KAI, Node( is_switch=True ) )
        self.add_node( GRE, Node( is_switch=True ) )
        self.add_node( DOR, Node( is_switch=True ) )
        self.add_node( BOC, Node( is_switch=True ) )
        self.add_node( FHM, Node( is_switch=True ) )
        self.add_node( REG, Node( is_switch=True ) )
        self.add_node( AUG, Node( is_switch=True ) )
        self.add_node( GAR, Node( is_switch=True ) )
        self.add_node( DUI, Node( is_switch=True ) )
        self.add_node( FZJ, Node( is_switch=True ) )
        self.add_node( AAC, Node( is_switch=True ) )
        self.add_node( WUE, Node( is_switch=True ) )
        self.add_node( TUB, Node( is_switch=True ) )
        self.add_node( HUB, Node( is_switch=True ) )
        self.add_node( HAN, Node( is_switch=True ) )
        self.add_node( FRA, Node( is_switch=True ) )
        self.add_node( POT, Node( is_switch=True ) )
        self.add_node( ERL, Node( is_switch=True ) )
        self.add_node( BAY, Node( is_switch=True ) )
        self.add_node( FFO, Node( is_switch=True ) )
        self.add_node( ZIB, Node( is_switch=True ) )
        self.add_node( ZEU, Node( is_switch=True ) )

        # edd edges
        self.add_edge( CHE , LEI, bw=10, delay=0.298077704142ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( CHE , DRE, bw=10, delay=0.322365195402ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( LEI , ERL, bw=10, delay=0.999726235212ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( LEI , JEN, bw=10, delay=0.304663741178ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( LEI , Telekom, bw=10, delay=0.177188075451ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( ADH , ZIB, bw=10, delay=0.0ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( ADH , HUB, bw=10, delay=0.0ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( DRE , POT, bw=10, delay=0.611196404787ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( DRE , ERL, bw=10, delay=1.36511770402ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( GSI , FRA, bw=10, delay=0.120153551776ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( GSI , HEI, bw=10, delay=0.224591638201ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( HEI , FZK, bw=10, delay=0.206100579927ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( JEN , ILM, bw=10, delay=0.305112206139ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( ILM , ERL, bw=10, delay=0.531397405368ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( DeCix , FRA, bw=10, delay=1.07425900065ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( Geant , FRA, bw=10, delay=1.07425900065ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( FZK , STU, bw=10, delay=0.123846482309ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( FZK , FRA, bw=10, delay=0.545310550152ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( FZK , KAI, bw=10, delay=0.257654222135ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( STU , GAR, bw=10, delay=0.183710390854ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( DeCix , POT, bw=10, delay=1.21589909521ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( Telia , POT, bw=10, delay=1.21589909521ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( BIE , PAD, bw=10, delay=0.151235973103ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( BIE , HAN, bw=10, delay=0.239411525498ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( BIE , MUE, bw=10, delay=0.0749935777704ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( GOE , HAN, bw=10, delay=0.403219149905ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( GOE , KAS, bw=10, delay=0.132198343422ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( BRE , EWE, bw=10, delay=0.285174357757ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( BRE , HAN, bw=10, delay=0.466716654548ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( BRE , HAM, bw=10, delay=0.613075736052ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( WUP , BIR, bw=10, delay=0.177529497718ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( WUP , DOR, bw=10, delay=0.132208980425ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( BIR , FRA, bw=10, delay=0.866363974909ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( BIR , BON, bw=10, delay=0.114396168803ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( BON , AAC, bw=10, delay=0.43021086546ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( MAR , GIE, bw=10, delay=0.123927107746ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( MAR , KAS, bw=10, delay=0.335776873611ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( GIE , FRA, bw=10, delay=0.226423040499ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( KAS , PAD, bw=10, delay=0.212992035908ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( EWE , MUE, bw=10, delay=0.593000769253ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( Telekom , HAN, bw=10, delay=0.65116824746ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( MUE , DUI, bw=10, delay=0.239436899338ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( SAA , FRA, bw=10, delay=0.726207753593ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( SAA , KAI, bw=10, delay=0.237226880719ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( GC , FRA, bw=10, delay=0.726207753593ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( DES , TUB, bw=10, delay=1.1465338582ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( DES , HAM, bw=10, delay=0.0ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( KIE , ROS, bw=10, delay=0.613089850628ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( KIE , HAN, bw=10, delay=0.95715083448ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( ROS , HAN, bw=10, delay=1.23919188963ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( ROS , GRE, bw=10, delay=0.451874040959ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( MAG , BRA, bw=10, delay=0.198596354707ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( MAG , POT, bw=10, delay=0.286623903897ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( BRA , HAN, bw=10, delay=0.181955327902ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( KAI , FRA, bw=10, delay=0.500429501646ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( GRE , POT, bw=10, delay=0.833384976554ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( DOR , BOC, bw=10, delay=0.0404988498769ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( BOC , DUI, bw=10, delay=0.0384340170956ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( FHM , REG, bw=10, delay=0.410717758791ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( FHM , GAR, bw=10, delay=0.0571389176142ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( REG , ERL, bw=10, delay=0.380251182629ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( AUG , GAR, bw=10, delay=0.146679197743ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( AUG , ERL, bw=10, delay=0.591013866677ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( GAR , FRA, bw=10, delay=0.476790264006ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( DUI , HAN, bw=10, delay=0.114794696877ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( DUI , FZJ, bw=10, delay=0.303995280517ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( FZJ , AAC, bw=10, delay=0.136555592075ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( AAC , FRA, bw=10, delay=1.2185434171ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( WUE , FRA, bw=10, delay=0.590926981844ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( WUE , ERL, bw=10, delay=0.435614129907ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( TUB , ZIB, bw=10, delay=0.0ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( TUB , HUB, bw=10, delay=0.0ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( TUB , POT, bw=10, delay=0.114412479891ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( TUB , ZEU, bw=10, delay=0.0950223458116ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( HAN , FRA, bw=10, delay=0.947985832412ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( HAN , POT, bw=10, delay=0.528173527957ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( HAN , ERL, bw=10, delay=1.10642887727ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( HAN , FFO, bw=10, delay=0.329662720518ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( FRA , POT, bw=10, delay=0.738212609301ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( FRA , ERL, bw=10, delay=0.977051156896ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( POT , ERL, bw=10, delay=0.924510931658ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( POT , BAY, bw=10, delay=0.910912393939ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( POT , FFO, bw=10, delay=0.342242121493ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( POT , ZIB, bw=10, delay=0.114412479891ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( ERL , BAY, bw=10, delay=0.297042828821ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( FFO , ZIB, bw=10, delay=0.308640678658ms, loss=0, max_queue_size=1000, use_htb=True)
        self.add_edge( ZIB , ZEU, bw=10, delay=0.0950223458116ms, loss=0, max_queue_size=1000, use_htb=True)

        # Consider all switches and hosts 'on'
        self.enable_all()

topos = { 'generated': ( lambda: GeneratedTopo() ) }
