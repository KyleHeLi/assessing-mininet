"""
Custom topology for Mininet, generated by GraphML-Topo-to-Mininet-Network-Generator.
"""

from mininet.topo import Topo

class GeneratedTopo( Topo ):
    "Internet Topology Zoo Specimen."

    def __init__( self ):
        "Create a topology."

        # Initialize Topology
        Topo.__init__( self )
        CHE = self.addSwitch( 's0' )
        LEI = self.addSwitch( 's1' )
        ADH = self.addSwitch( 's2' )
        DRE = self.addSwitch( 's3' )
        GSI = self.addSwitch( 's4' )
        HEI = self.addSwitch( 's5' )
        JEN = self.addSwitch( 's6' )
        ILM = self.addSwitch( 's7' )
        DeCix = self.addSwitch( 's8' )
        Geant = self.addSwitch( 's9' )
        FZK = self.addSwitch( 's10' )
        STU = self.addSwitch( 's11' )
        DeCix = self.addSwitch( 's12' )
        Telia = self.addSwitch( 's13' )
        BIE = self.addSwitch( 's14' )
        Telekom = self.addSwitch( 's15' )
        GOE = self.addSwitch( 's16' )
        BRE = self.addSwitch( 's17' )
        WUP = self.addSwitch( 's18' )
        BIR = self.addSwitch( 's19' )
        BON = self.addSwitch( 's20' )
        MAR = self.addSwitch( 's21' )
        GIE = self.addSwitch( 's22' )
        KAS = self.addSwitch( 's23' )
        PAD = self.addSwitch( 's24' )
        EWE = self.addSwitch( 's25' )
        Telekom = self.addSwitch( 's26' )
        MUE = self.addSwitch( 's27' )
        SAA = self.addSwitch( 's28' )
        GC = self.addSwitch( 's29' )
        DES = self.addSwitch( 's30' )
        HAM = self.addSwitch( 's31' )
        KIE = self.addSwitch( 's32' )
        ROS = self.addSwitch( 's33' )
        MAG = self.addSwitch( 's34' )
        BRA = self.addSwitch( 's35' )
        KAI = self.addSwitch( 's36' )
        GRE = self.addSwitch( 's37' )
        DOR = self.addSwitch( 's38' )
        BOC = self.addSwitch( 's39' )
        FHM = self.addSwitch( 's40' )
        REG = self.addSwitch( 's41' )
        AUG = self.addSwitch( 's42' )
        GAR = self.addSwitch( 's43' )
        DUI = self.addSwitch( 's44' )
        FZJ = self.addSwitch( 's45' )
        AAC = self.addSwitch( 's46' )
        WUE = self.addSwitch( 's47' )
        TUB = self.addSwitch( 's48' )
        HUB = self.addSwitch( 's49' )
        HAN = self.addSwitch( 's50' )
        FRA = self.addSwitch( 's51' )
        POT = self.addSwitch( 's52' )
        ERL = self.addSwitch( 's53' )
        BAY = self.addSwitch( 's54' )
        FFO = self.addSwitch( 's55' )
        ZIB = self.addSwitch( 's56' )
        ZEU = self.addSwitch( 's57' )

        #HOSTS (put here if needed)
        # dont forget to add edges afterwards!


        # EDD EDGES
        self.addLink( CHE , LEI, bw=10, delay=0.298077704142ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( CHE , DRE, bw=10, delay=0.322365195402ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( LEI , ERL, bw=10, delay=0.999726235212ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( LEI , JEN, bw=10, delay=0.304663741178ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( LEI , Telekom, bw=10, delay=0.177188075451ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( ADH , ZIB, bw=10, delay=0.0ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( ADH , HUB, bw=10, delay=0.0ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( DRE , POT, bw=10, delay=0.611196404787ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( DRE , ERL, bw=10, delay=1.36511770402ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( GSI , FRA, bw=10, delay=0.120153551776ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( GSI , HEI, bw=10, delay=0.224591638201ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( HEI , FZK, bw=10, delay=0.206100579927ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( JEN , ILM, bw=10, delay=0.305112206139ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( ILM , ERL, bw=10, delay=0.531397405368ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( DeCix , FRA, bw=10, delay=1.07425900065ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( Geant , FRA, bw=10, delay=1.07425900065ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( FZK , STU, bw=10, delay=0.123846482309ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( FZK , FRA, bw=10, delay=0.545310550152ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( FZK , KAI, bw=10, delay=0.257654222135ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( STU , GAR, bw=10, delay=0.183710390854ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( DeCix , POT, bw=10, delay=1.21589909521ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( Telia , POT, bw=10, delay=1.21589909521ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( BIE , PAD, bw=10, delay=0.151235973103ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( BIE , HAN, bw=10, delay=0.239411525498ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( BIE , MUE, bw=10, delay=0.0749935777704ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( GOE , HAN, bw=10, delay=0.403219149905ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( GOE , KAS, bw=10, delay=0.132198343422ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( BRE , EWE, bw=10, delay=0.285174357757ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( BRE , HAN, bw=10, delay=0.466716654548ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( BRE , HAM, bw=10, delay=0.613075736052ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( WUP , BIR, bw=10, delay=0.177529497718ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( WUP , DOR, bw=10, delay=0.132208980425ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( BIR , FRA, bw=10, delay=0.866363974909ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( BIR , BON, bw=10, delay=0.114396168803ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( BON , AAC, bw=10, delay=0.43021086546ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( MAR , GIE, bw=10, delay=0.123927107746ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( MAR , KAS, bw=10, delay=0.335776873611ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( GIE , FRA, bw=10, delay=0.226423040499ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( KAS , PAD, bw=10, delay=0.212992035908ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( EWE , MUE, bw=10, delay=0.593000769253ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( Telekom , HAN, bw=10, delay=0.65116824746ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( MUE , DUI, bw=10, delay=0.239436899338ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( SAA , FRA, bw=10, delay=0.726207753593ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( SAA , KAI, bw=10, delay=0.237226880719ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( GC , FRA, bw=10, delay=0.726207753593ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( DES , TUB, bw=10, delay=1.1465338582ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( DES , HAM, bw=10, delay=0.0ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( KIE , ROS, bw=10, delay=0.613089850628ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( KIE , HAN, bw=10, delay=0.95715083448ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( ROS , HAN, bw=10, delay=1.23919188963ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( ROS , GRE, bw=10, delay=0.451874040959ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( MAG , BRA, bw=10, delay=0.198596354707ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( MAG , POT, bw=10, delay=0.286623903897ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( BRA , HAN, bw=10, delay=0.181955327902ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( KAI , FRA, bw=10, delay=0.500429501646ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( GRE , POT, bw=10, delay=0.833384976554ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( DOR , BOC, bw=10, delay=0.0404988498769ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( BOC , DUI, bw=10, delay=0.0384340170956ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( FHM , REG, bw=10, delay=0.410717758791ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( FHM , GAR, bw=10, delay=0.0571389176142ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( REG , ERL, bw=10, delay=0.380251182629ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( AUG , GAR, bw=10, delay=0.146679197743ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( AUG , ERL, bw=10, delay=0.591013866677ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( GAR , FRA, bw=10, delay=0.476790264006ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( DUI , HAN, bw=10, delay=0.114794696877ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( DUI , FZJ, bw=10, delay=0.303995280517ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( FZJ , AAC, bw=10, delay=0.136555592075ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( AAC , FRA, bw=10, delay=1.2185434171ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( WUE , FRA, bw=10, delay=0.590926981844ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( WUE , ERL, bw=10, delay=0.435614129907ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( TUB , ZIB, bw=10, delay=0.0ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( TUB , HUB, bw=10, delay=0.0ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( TUB , POT, bw=10, delay=0.114412479891ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( TUB , ZEU, bw=10, delay=0.0950223458116ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( HAN , FRA, bw=10, delay=0.947985832412ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( HAN , POT, bw=10, delay=0.528173527957ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( HAN , ERL, bw=10, delay=1.10642887727ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( HAN , FFO, bw=10, delay=0.329662720518ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( FRA , POT, bw=10, delay=0.738212609301ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( FRA , ERL, bw=10, delay=0.977051156896ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( POT , ERL, bw=10, delay=0.924510931658ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( POT , BAY, bw=10, delay=0.910912393939ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( POT , FFO, bw=10, delay=0.342242121493ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( POT , ZIB, bw=10, delay=0.114412479891ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( ERL , BAY, bw=10, delay=0.297042828821ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( FFO , ZIB, bw=10, delay=0.308640678658ms, loss=0, max_queue_size=1000, use_htb=True)
        self.addLink( ZIB , ZEU, bw=10, delay=0.0950223458116ms, loss=0, max_queue_size=1000, use_htb=True)


topos = { 'generated': ( lambda: GeneratedTopo() ) }
